<?xml version="1.0" encoding="utf-8"?>
<!-- generator="" -->
<?xml-stylesheet href="/components/com_jcomments/tpl/default/style.css?v=10" type="text/css"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>FAQ</title>
		<description>OpenFoundry provides essential tools and services through its service platform for users to develop Open Source Software Projects, the operating funds comes from the National Science Council and the Research Center for Information Technology Innovation of Academia Sinica Taiwan.</description>
		<link>https://www.openfoundry.org/en/faq</link>
		<lastBuildDate>Thu, 21 Nov 2019 16:00:08 +0000</lastBuildDate>
		<generator></generator>
		<language>en-gb</language>
		<item>
			<title>自由開源軟體概念相關類 </title>
			<link>https://www.openfoundry.org/en/faq/licenses/concepts-of-foss</link>
			<guid>https://www.openfoundry.org/en/faq/licenses/concepts-of-foss</guid>
			<description><![CDATA[<a name="faq1top"></a>
<div class="border-radius">
<ul class="bullet-8">
<li>問題 1：<a href="https://www.openfoundry.org/#k1q1">哪些不同的授權條款的程式碼是不能一同抄寫在一起的呢？</a></li>
<li>問題 2：<a href="https://www.openfoundry.org/#k1q2">使用他人自由開源軟體授權的程式，著作權聲明該如何標示？</a></li>
<li>問題 3：<a href="https://www.openfoundry.org/#k1q3">什麼是自由軟體 (Free Software)？</a></li>
<li>問題 4：<a href="https://www.openfoundry.org/#k1q4">什麼是開放源碼軟體 (Open Source Software)？與自由軟體有什麼差別？</a></li>
<li>問題 5：<a href="https://www.openfoundry.org/#k1q5">什麼是「免費軟體」(Freeware)？與自由開源軟體有什麼差別？</a></li>
<li>問題 6：<a href="https://www.openfoundry.org/#k1q6">什麼是「共享軟體」(Shareware)？與自由開源軟體有什麼差別？</a></li>
<li>問題 7：<a href="https://www.openfoundry.org/#k1q7">什麼是“Copyleft ”？</a></li>
<li>問題 8：<a href="https://www.openfoundry.org/#k1q8">自由軟體授權條款可以如何分類？</a></li>
<li>問題 9：<a href="https://www.openfoundry.org/#k1q9">自由開源軟體授權條款「不得收取授權金」的原則，是什麼意思？</a></li>
<li>問題10：<a href="https://www.openfoundry.org/#k1q10">自由開源軟體授權條款「不得收取授權金」的原則，是否允許例外？</a></li>
</ul>
</div>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 1</span>  <a name="k1q1" id="id"></a> 哪些不同的授權條款的程式碼是不能一同抄寫在一起的呢？</h4>
<p> </p>
<p>原則上，只要是 Copyleft 性質的授權條款，它的程式碼就不能與其他同屬 Copyleft 類別的程式碼抄寫在一起。（關於 Copyleft 性質的說明，請見<a href="https://www.openfoundry.org/#k1q7">問題 7</a>。）</p>
<p>具有 Copyleft 性質的授權條款主要是 GPL 類，而 MPL、CDDL、EPL 與 CPL 也具有部份 Copyleft 性質，因此，原則上任一 GPL 類的程式碼都不能和另一類 GPL 類的程式碼抄在一起，例如 GPL-2.0 程式碼不能與 GPL-3.0 程式碼抄寫在一起，而只能去抄 BSD、MIT 授權的程式碼，然後最後整個作品的授權條款改為 GPL-2.0 授權。（常見的授權條款分類請見<a href="https://www.openfoundry.org/#k1q8">問題 8</a>。）</p>
<p>不過這樣的原則仍有例外，例如 GPL-2.0 與 LGPL-2.1 間特別規定有相容的轉換條款，LGPL-2.1 程式碼可以單向地改採 GPL-2.0 授權，透過轉換條款，LGPL-2.1 與 GPL-2.0 並不相衝突；另外 MPL-1.1 第 13 條明示多重授權機制，讓使用者在利用與散布特定 MPL-1.1 程式碼的時候，可以有機會改採其他的條款來授權這些特定的 MPL-1.1 程式碼。</p>
<p>若是您所利用的自由開源軟體授權條款多樣、複雜的話，建議您尋求專家的諮詢，以確認這些授權條款彼此相容。</p>
<p>此外，您也可以參考自由軟體基金會 (Free Software Foundation, FSF) 的授權條款列表與說明，來了解哪些自由開源軟體授權條款程式碼適合與 GPL、LGPL 程式碼寫在一起：<a href="https://www.gnu.org/licenses/license-list.html" target="_black">https://www.gnu.org/licenses/license-list.html</a></p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 2</span>  <a name="k1q2" id="id"></a> 使用他人自由開源軟體授權的程式，著作權聲明該如何標示？</h4>
<p> </p>
<p>著作權聲明的標示並沒有一定的制式格式，只要使用者可以容易看到，並且內容清楚易懂即可。您可以寫個獨立的文字檔案來說明您的著作權與授權內容，並讓這個文字檔隨著自由開源軟體一起散布；若是您的軟體有圖形化介面(GUI)的話，則可以將這些文字內容放在『關於(About)』中。</p>
<p>若是您的開源軟體是修改自他人的自由軟體而來，請在標示著作權的時候，也將他人的自由開源軟體相關資訊也標示出來，以彰顯其他自由開源軟體開發者與著作權人的聲譽。</p>
關於這方面的資訊，您可以參考下面文章：<ol>
<li>宣告授權條款的方式：<a href="https://www.openfoundry.org/for-developers/1884-2010-07-13-09-48-09" target="_black">https://www.openfoundry.org/for-developers/1884-2010-07-13-09-48-09</a></li>
<li>修改自由軟體的著作權人標示：<a href="https://www.openfoundry.org/tw/legal-column/1747-2010-07-15-10-26-14" target="_black">https://www.openfoundry.org/tw/legal-column/1747-2010-07-15-10-26-14</a></li>
<li>內含 GPL 授權元件產品的標示義務：<a href="https://www.openfoundry.org/tw/legal-column-list/2384" target="_black">https://www.openfoundry.org/tw/legal-column-list/2384</a></li>
</ol><span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 3</span>  <a name="k1q3" id="id"></a> 什麼是自由軟體 (Free Software)？</h4>
<p> </p>
<p>嚴格來說，自由軟體 (Free Software) 是指符合自由軟體基金會 (Free Software Foundation, FSF) 所定義的<a href="https://www.gnu.org/philosophy/free-sw.zh-tw.html" target="_black">四大自由</a>內涵的軟體，與開放源碼軟體 (Open Source Software) 並不相同。由於一個軟體是否符合四大自由取決於授權條款的內容，因此自由軟體基金會在其網站上列有符合四大自由的<a href="https://www.gnu.org/licenses/license-list.html" target="_black">授權條款清單</a>。</p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 4</span>  <a name="k1q4" id="id"></a> 什麼是開放源碼軟體 (Open Source Software)？與自由軟體有什麼差別？</h4>
<p> </p>
<p>開放源碼軟體，中文也有翻譯為開源軟體或開放原始碼軟體，是指採用開放源碼授權條款來散布授權的軟體。而所謂開放源碼授權條款，是指通過「開放源碼促進會」(Open Source Initiative, OSI ) 審查，符合<a href="https://opensource.org/docs/osd" target="_black">開放源碼定義 (Open Source Definition, OSD)</a> 的授權條款。由於英文中的 "free" 會引發使用者誤解自由軟體是免費的軟體，間接阻礙自由軟體的商業發展，因此開放源碼促進會改採用「開放源碼」(Open Source)一詞，希望避免誤解，進而促進自由軟體的商業發展。因此嚴格來說，自由軟體與開放源碼軟體是兩種定義不同的軟體，其背後所想要達到的目的也不相同，不過由於這兩種軟體有著許多共通點，因此若是不加以深究的話，可以簡單地將兩者視為同一種類的軟體。</p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 5</span>  <a name="k1q5" id="id"></a> 什麼是「免費軟體」(Freeware)？與自由開源軟體有什麼差別？</h4>
<p> </p>
<p>Freeware，英文中所使用的 Free 指的是「免費」的意思，中文常翻作「免費軟體」，這類的軟體簡單來說就是 "Free-downloaded Software"，使用者可以免費下載這樣的軟體，但不見得可以取得程式的原始碼。此外，免費軟體的著作權利人還是保有其著作權利，所以雖然可以免費下載，但要看下載者的立場來判定是否合法使用，部份的免費軟體是允許使用者做任何方式的利用，即使使用者是公司也一樣，但也有很大部份的免費軟體，是限定只讓終端使用者 「個人免費使用」(End-user only)。</p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 6</span>  <a name="k1q6" id="id"></a> 什麼是「共享軟體」(Shareware)？與自由軟體有什麼差別？</h4>
<p> </p>
<p>Shareware，中文常翻作「共享軟體」，這類的軟體可以說就是「進階版的Freeware」，使用者可以免費下載共享軟體來使用，但軟體使用上可能有附帶限制，例如使用時間受限，使用者只能使用30天，30天後若不付費的話就必須停止使用；又例如免費的版本只提供部份功能，付費後使用者才會得到程式完整功能的使用權。此外，使用者也無法拿到共享軟體程式的原始碼。</p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 7</span>  <a name="k1q7" id="id"></a> 什麼是“Copyleft ”？</h4>
<p> </p>
<p>"Copyleft" 一詞由史托曼 (Richard M. Stallman) 首先提出，乃是針對「著作權」的英文 "Copyright"而新造的詞，用來代表一種與過往常見的程式授權方式相反的新授權機制，以防止程式源碼被封閉起來，而導致程式無法再被改進。 Copyleft機制建立在承認程式受到著作權保護的基礎之上，預先將複製 與修改程式等著作權的權利授權出去，讓使用者在拿到程式的同時就可合法複製與修改程式，此外，當使用者在散布程式的時候，也必須要讓後手擁有複製與 修改程式的權利。由於過往常見的程式授權方式並沒有將複製與修改程式的權利預先授予使用者，使用者通常僅可以執行程式，因此 Copyleft 與過往常見的程式授權方式大相逕庭。</p>
<p>目前 Copyleft 並沒有一個明確的定義，但是依據史托曼的著作 "What is Copyleft?"，可以歸納出 Copyleft 主要具有三項特性：(1) 以實現程式使用者的四大自由為目的；(2) 將複製與修改程式碼的權利預先授權出去；(3) 散布程式碼的同時仍必須採用相同方式來授權。</p>
您可參考下面這兩篇文章，以獲得更詳細的資訊：<ol>
<li>Copyleft〈公共版權〉：<a href="https://www.openfoundry.org/tw/glossary/736-copyleft" target="_black">https://www.openfoundry.org/tw/glossary/736-copyleft</a></li>
<li>What is Copyleft?：<a href="https://www.gnu.org/copyleft/" target="_black">https://www.gnu.org/copyleft/</a></li>
</ol><span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 8</span>  <a name="k1q8" id="id"></a> 自由軟體授權條款可以如何分類？</h4>
<p> </p>
<p>自由開源軟體授權條款依照不同的標準，可以有不同的分類方法。為了方便分析自由開源軟體授權條款之間的相容性，因此 OSSF 將授權條款分為下列三類：GPL 類、BSD 類與其他類：GPL 類授權條款對於衍生著作的拘束性較強，大多數的情況下，衍生著作仍然必須採用原來相同的條款繼續授權；BSD類條款則對於衍生著作權的授權內容幾乎沒有拘束；而其他類條款對於衍生著作權授權內容的拘束性則介於中間，原則上必須採用原來相同的條款繼續授權，但是例外狀況可以採用其他的條款來授權。</p>
<p>常見的授權條款分類請見下表：<a href="https://www.openfoundry.org//foss-license-category" target="_black">「常見自由開源軟體授權條款分類表」</a>。</p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 9</span>  <a name="k1q9" id="id"></a> 自由開源軟體授權條款「不得收取授權金」的原則，是什麼意思？</h4>
<p> </p>
<p>自由開源軟體授權原則上是以「不收取」著作權權利金、專利權權利金的方式進行散布，這是因為授權金的收取方式，向來有「授權對象、授權地域、授權期間」的限制，這些限制與自由開源軟體允許使用者自行修改、自行重製散布的模式有衝突，所以不得以收取授權金的方式來運作。不過在實際應用上，有些收費模式並不違背這項原則，例如雙重授權模式，這時候就會看到收取授權金的例外與不收取授權金的原則並存而行。關於雙重授權模式，請參見<a href="https://www.openfoundry.org/#k1q10">問題 10</a>。</p>
<p>需注意的是，自由開源軟體的商標權授權金是可以收取的，因為商標權是以圖標、圖形 (mark, logo) 的方式來顯現，這些圖標、圖形是可以被使用者自行移除掉的，只要自行移除掉，就不會有商標授權方面的問題。使用上若不欲支付商標授權金給商業公司，需注意：(1) 不拿商標本身與此商標有關的字樣來為商業服務廣告宣傳，僅能事實性的標註該專案的利用狀態；(2) 產品在散布時，移除掉商標的圖標及圖形。若不能達致上述兩種方法，並涉及商業利用的話，那麼就必須另行與商業公司洽談取得該商標的書面授權。</p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 10</span>  <a name="k1q10" id="id"></a> 自由開源軟體授權條款「不得收取授權金」的原則，是否允許例外？</h4>
<p> </p>
<p>實務上「雙重授權」的做法可以達到收取授權金的目的，而同時又不會影響自由開源軟體不收取著作權與專利權授權金的原則。例如 Oracle MySQL 資料庫同時以商業授權及 GPL-2.0 的方式併行釋出，所以如果使用者選擇以 GPL-2.0 的方式取得 Oracle MySQL 資料庫，便可以不用支付授權金給 Oracle，唯後續對此資料庫軟體的修改與散布，都必須依照 GPL-2.0 的授權規則來進行；但如果使用者選擇以商業授權的方式取得 Oracle MySQL 資料庫，那麼就必須支付一筆授權金給 Oracle，來取得商業授權的 MySQL 版本，但其後對該資料庫軟體的應用，則悉依商業授權的規範，而不需再受到 GPL-2.0 的約束。</p>
<p>不過要注意的是，必須所有自由開源軟體的著作權人均同意，才可以進行這樣的雙重授權。若是軟體中包含軟體專利的話，也一樣必須要取得所有專利權人的同意，方得進行。</p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>]]></description>
			<author>contact@openfoundry.org (法政組)</author>
			<category>問答集</category>
			<pubDate>Fri, 21 Sep 2012 08:58:05 +0000</pubDate>
		</item>
		<item>
			<title>GPL類授權</title>
			<link>https://www.openfoundry.org/en/faq/licenses/gpl-like-licenses</link>
			<guid>https://www.openfoundry.org/en/faq/licenses/gpl-like-licenses</guid>
			<description><![CDATA[<a name="faq1top"></a>
<div class="border-radius">
<ul class="bullet-8">
<li>問題 1：<a href="https://www.openfoundry.org/#k1q1">關於軟體專利的授權，請問GPL有無規範？</a></li>
<li>問題 2：<a href="https://www.openfoundry.org/#k1q2">（承上）GPL 若有關於軟體專利授權的規範，有無區分「衍生程式的專利」和「獨立程式的專利」？</a></li>
<li>問題 3：<a href="https://www.openfoundry.org/#k1q3">我使用 Java 開發了一個資料存取軟體（暫稱為 A 軟體），而 A 軟體在執行時會使用到 GPL 授權的程式，但會由客戶自行安裝及設定，請問這種情況下，我所開發的 A 軟體會否受到 GPL 感染？</a></li>
</ul>
</div>
<p> </p>
<h4><a name="k1q1" id="id"></a><span class="fquestion">問題 1</span>  關於軟體專利的授權，請問GPL有無規範？</h4>
<p> </p>
<p>GPL-2.0究竟有無明定「軟體專利授權」存在著爭議，有人認為有，有人認為沒有。認為 GPL-2.0 已明訂軟體專利授權條款的人，主要根據來自第7條：任一 GPL-2.0 授權的程式一經散布之後，就必須完全依照 GPL-2.0 的規則來提供修改、應用、重製與散布，即使上面有經司法訴訟判定的軟體專利權利，亦同，若不能做到這點，散布者就不得散布這個 GPL-2.0 授權的程式。<br /><br />然而，部分論者認為GPL-2.0 第7條僅在表達一種態度，而未明文處理軟體專利授權議題，因為第7條確實從頭到尾並無明示「依據 GPL-2.0 取得程式著作權授權之人，一併取得其軟體專利的使用授權。」那麼，依照各國著作權法，著作財產權授權約定不明的部分，多推定為未授權；而專利權的授權方面，慣性上也多以明示的書面授權文件為準，所以推論上，並沒有強而有力的具體根據，認為僅依GPL-2.0第7條的規定，就認定該條款規範了明確的專利授權機制。GPL改版至3.0時，處理了這個議題，其明文規範依據 GPL-3.0 取得程式著作權授權之人，一併取得其軟體專利的使用授權。自此之後，採GPL-3.0 授權的元件，軟體專利有無隨同授權的爭議已不復存在，然GPL-2.0關於此議題，還存有懸而難解的灰色地帶。<br /><br />關於GPL-2.0第7條的推論與說法的進一步說明，可以參照葛冬梅小姐與林誠夏先生合寫的<a href="https://www.openfoundry.org/tw/legal-column-list/894-gpl2-7">「GPL-2.0 第 7 條淺評」</a>的短篇專文 </p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 2</span>  <a name="k1q2" id="id"></a><span style="line-height: 40px;">（承上）GPL若有關於軟體專利授權的規範，有無區分「衍生程式的專利」和「獨立程式的專利」？</span></h4>
<p><br />所謂獨立程式，依照一般通說，指的是其並非參考GPL程式來撰寫，該程式也可以被其他程式呼叫，或呼叫其他程式；而其與GPL程式的結合，只是置於同一個專案裡去進行功能上分工，這種狀態的話，該程式的授權狀態未必直接受到 GPL 程式的影響。<br /><br />因此，一般來說，個別元件被判定為「獨立程式」的話，不論是GPL-2.0或GPL-3.0的所有授權規則都不會過渡到其上。所以依照這樣的論述，在一個大型軟體專案裡，「GPL 元件衍生程式的專利」與「GPL 元件獨立程式的專利」是有分立與分別主張的機會的。<br /> </p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<h4><span class="fquestion">問題 3</span>  <a name="k1q3" id="id"></a><span style="line-height: 40px;">我使用 Java 開發了一個資料存取軟體（暫稱為 A 軟體），而A軟體在執行時會使用到 GPL 授權的程式，但會由客戶自行安裝及設定，請問這種情況下，我所開發的 A 軟體會否受到 GPL 感染？</span></h4>
<p><br />如果你在安裝程式的流程裡，讓客戶可自行閱讀軟體的授權聲明，並自行進行這些 GPL 授權元件的安裝，那麼可以視為客戶自行下載取得這些 GPL 授權元件，而有機會可解釋為「自由開源軟體分開下載、自行安裝 」的區隔方式。因為這樣的方式是將程式與程式間結合的責任轉嫁給客戶，所以受到 GPL 拘束的主體就變成該名自行安裝 GPL 程式的客戶，實務上、只要該客戶不再散布這個組合過的系統，就不會產生 GPL 授權程式散布後要再提供原始碼給後手的問題，但前提是、客戶需要充份認知到這個事實並且也同意，先期溝通清楚，這樣可以降低日後很多的爭議或是糾紛。</p>
<p>不過，如果你是打包成一整個 PACKAGE，可透過「機械化的自動方式」來安裝，那麼多數的見解是這樣的運用方式仍會開啟 GPL 的授權拘束性。</p>
<p>關於這方面的資訊，您可以參考下列文章來進一步了解相關內容：<a href="https://www.openfoundry.org/tw/legal-column-list/1711" target="_black">GPL 的另類利用方式：「分開散布．責任轉嫁」。 </a></p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>]]></description>
			<author>contact@openfoundry.org (法政組)</author>
			<category>問答集</category>
			<pubDate>Fri, 21 Sep 2012 08:58:05 +0000</pubDate>
		</item>
		<item>
			<title>License Choice</title>
			<link>https://www.openfoundry.org/en/faq/choosing-of-licenses</link>
			<guid>https://www.openfoundry.org/en/faq/choosing-of-licenses</guid>
			<description><![CDATA[<p><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;"><strong>Q1</strong></span>:<strong> Masao favors the terms of a specific license--for example, GPL--but finds that some articles in the license do not fit his needs. If he takes those articles away, will he still be able to claim that the modified license is the same as the original GPL?</strong></p>
<p><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;"><strong>A1</strong></span>: He will not. A license is a contract between the author of a work (the licensor) and the user of that work (the licensee). An author can decide the terms of a contract. He or she can choose a popular license (such as GPL) or arrange with the user a set of terms different from popular licenses. When the author and the user agree on the terms, the licensing contract between the two parties is made.There is some problem, however, with Masao’s case. He favors the terms of a popular license X, but some of its terms do not fit his particular needs. What he can do is to use X as a reference and to create a new licensing contract—let’s call it license Y—by adding, removing or modifying the terms of license X. Once any addition, removal or modification is done, however, Masao is no longer able to claim that his licensing terms are called X. By claiming so, he misleads users into believing that Masao’s contract terms are those of X. They will not be able to know that Masao’s terms are actually different from license X. This in turns will cause the two parties to have different interpretations of the licensing terms and can even cause disputes.</p>
<p>&nbsp;</p>
<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">Q2</span>: Masao would like to create a module C by modifying modules A and B. Modules A and B are licensed under licenses X and Y. Will Masao be able to do so? In addition, should Masao release module C under license X or Y, or will he be able to release it under a license that is compatible with licenses X and Y? If licenses X and Y are not compatible with each other in nature, what should Masao do?</strong></p>
<p><span size="5" style="font-size: x-large;"><strong><span color="#ff6600" style="color: #ff6600;">A2</span></strong></span>: It depends on whether the licenses involved are compatible with each other. Masao creates a module C by modifying modules A and B. Module C is, according to the Copyright Law, the derivative work of both modules A and B. To be able to create such a work, Masao must have the permission to modification from the respective authors of modules A and B. In addition, whether Masao is able to integrate the two modules into one will depend on the compatibility of the respective licensing terms (licenses X and Y) of modules A and B.If the terms on derivative work in both licenses do not conflict—say, if license X does not say that a work must not be integrated with another work under license Y and vice versa—Masao will be able to integrate modules A and B into module C, since licenses X and Y are compatible with each other. If that is the case, Masao will be able to, as the author of module C, release the module under either license X, Y, or any other license that is compatible with licenses X and Y.On the other hand, it is possible that licenses X and Y are not compatible with each other. For example, in license X there may be articles saying that the distribution of a work must be accompanied with the releasing of its source code, whereas in license Y there is no such requirement. In addition, license X may disallow any commercial use of a work, whereas license Y does not prohibit it. If Masao would still like to integrate both modules A and B into module C, either he has to release his work under license X, which is more strict, or he has to look for another license that is compatible with both licenses X and Y.Since there are many popular free/open source software licenses, and since determining compatibility requires careful legal interpretation of the licenses involved, we recommend Masao seek professional help for his case.</p>
<p>&nbsp;</p>
<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">Q3</span>: Masao has developed a program Foo, which uses Cygwin Library by linking the library into the executable file. Cygwin Library is released under the GPL. Program Foo also links another library Bar that is developed by Masao. Here are two questions: (1) Since Foo uses the Cygwin Library, which is released under GPL, must Foo (including the final product, or the executable file, and its source code) also be released under GPL? (2) Must the library Bar, which is independently developed by Masao, also be released under GPL?</strong></p>
<p><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;"><strong>A3</strong></span>: GNU General Public License (GPL) covers both the work released under the license and its derivates as a whole. According to its Section 2, Paragraph 2: “These requirements apply to the modified work as a whole.” If a certain identifiable part of a work is not derived from another work that is released under GPL, that identifiable part does not need to be released under GPL. To put it in plain words:</p>
<p><strong>(1)</strong> Since Foo (statically) links to Cygwin Library, and since the Cygwin Library is released under GPL, Foo must therefore be released under GPL;</p>
<p><strong>(2) </strong>When Masao distributes Foo, if he also distributes Library Bar as a part of Foo, Bar must also be released under GPL; on the other hand, if Masao distributes Bar as a library that is independent from Foo, Bar needs not to be released under GPL.</p>
<p>&nbsp;</p>
<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">Q4</span>: Two questions: (1) Program Bar is developed by Carol. If Masao wants to use some part of Bar in his program Foo, does he need to obtain the permission from Carol? (2) If Bar is released under License Y, and Masao chooses to release Foo under License X, under which license should Masao choose to release the resulting work—the work that results from the integration of Foo and Bar?</strong></p>
<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">A4</span></strong>: <strong>(1)</strong> Masao needs to obtain the permission from Carol if he wants to uses part of Carol’s program Bar in his program Foo. The kind of permission he needs to get depends on what Masao is going to do.If Masao does not modify Bar, that is, if Masao simply uses Bar by duplicating all or part of Bar, he only needs to get the permission for reproduction of Bar from Carol. If Masao modifies Bar, either wholly or partially, and later puts the modified Bar into his program Foo, he will need to obtain the permission for modification. If Masao not only uses Bar in Foo by modifying Bar but also desires to distribute Foo, he will need not only the permission for modification but also the permission for distributing Bar.It is commonplace for software developers to use others’ programs, either wholly or partially. In principle, any such use requires permission from the author of the original work. The kind of permission—be it that of reproduction, modification or distribution—will depend on how the developer in question makes use of others’ programs.The majority of free/open source software licenses have already stated in their terms that the user of the software in question is granted the rights of reproducing, modifying and distributing the software. So long as the user observes the terms, there should be no infringement involved.</p>
<p><strong>(2)</strong> Masao integrates his own program Foo and Carol’s Bar and would like to combine them into a new Program Loremipsum If Foo is released under License X and Bar under Y, and if licenses X and Y are not compatible with each other, Foo and Bar will not be able to be integrated into Loremipsum. If Masao can obtain permissions from Carol, Loremipsum will be able to be licensed under a license that is neither X nor Y. To take one step further, upon Carol’s agreement, Loremipsum can even be licensed simply under license Y. The same could be said of Masao’s Foo if Carol seeks Masao’s agreement. (For issues on compatibility, please also refer to Q2 and Q3.)</p>
<p>&nbsp;</p>
<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">Q5</span>: Carol has a project Blah, which makes use of the modules A, B, C, which are in turn respectively released under licenses X, Y and Z. Carol chooses to release project Blah under License W, but licences X and W are not compatible with each other. So the questions are: (1) Will Carol breach the licensing terms of X, which is chosen by Masao for his module A? (2) Is Carol able to cite the disclaimer articles of licence W, and disclaim every responsibility from Masao?</strong></p>
<p><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;"><strong>A5</strong></span>: <strong>(1)</strong> What Carol has done already breaches the agreement made between her and Masao. Licenses W and X are not compatible, and Carol’s project Blah makes use of module A. Carol, however, does not observe the licensing terms of X and choose an incompatible license W to release her project. By doing this, Carol breaches the agreement with Masao that is stated in license X.</p>
<p><strong>(2)</strong> Carol will not be able to cite the disclaimer articles in license W to disclaim from Masao the liabilities of breaching license X. This is because license W is a set of terms between users of project Blah and the project’s developer (i.e. Carol), not between the project’s developer (Carol) and the developer of a module used (i.e. Masao).Note: Since free/open source software allows another person to reproduce, modify and distribute freely the source code of a program, it is not sensible to let the author of the work bear the burden of liabilities. In addition, such legal responsibilities should come with matching rewards. Since free/open source software usually allows another person to use it gratis, most free/open source software licenses come with disclaimer articles. This is meant to be an incentive of making source code open. Such disclaimer often comes in such form (here we cite the example for article 12 of GPL):IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES</p>
<p>&nbsp;</p>
<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">Q6</span>: (1) Masao has developed a program A that is released under a free/open source software license. A company now has commercial interests in software A. Can Masao talk with that company over a commercial license (in which, for example, Masao may charge the company loyalties)? (2) If software A is not entirely developed by Masao and in the process of development Masao has made use of module B made by another person, and module B in turn is released under free/open source software license Y, and software A is released under a free/open source software license upon its own completion. In such case, will Masao still be able to talk with other companies over a commercial license for A?</strong></p>
<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">A6</span></strong>: <strong>(1)</strong> Yes, Masao may talk with that company over a commercial license. Masao is the copyright holder of software A. Under the precondition that no other existing module is used and the software is independently developed, Masao can grant the rights of use of A under a different license (this is called double licensing). It is recommended, however, that Masao inform proactively the company in question that software A is already released under a free/open source software license. Since software license is a kind of contract, so long as Masao and the licensee reach an agreement, the contract stands. Besides, Masao can release software A under two licenses in the very beginning, one free/open source software license and another a commercial license.</p>
<p><strong>(2)</strong> Yes, under the perquisite that the commercial licensing terms are compatible with the terms of license Y. Since Masao’s software A in this case uses an existing module B developed by another person, the choice of A’s licensing terms has to be agreed upon by module B’s author (under the licensing terms of B). In some licenses such as the MIT license, however, the original work’s author has already granted to the person who modifies the work (e.g. Masao in this case) the freedom to choose a license to his/her own liking. So in this case Masao’s choice has already been agreed upon by the author of the module in question (for compatibility issues, please refer to Q2 and Q3).</p>]]></description>
			<author>contact@openfoundry.org (法政組)</author>
			<category>問答集</category>
			<pubDate>Mon, 15 Oct 2007 17:41:54 +0000</pubDate>
		</item>
		<item>
			<title>Modification</title>
			<link>https://www.openfoundry.org/en/faq/modification</link>
			<guid>https://www.openfoundry.org/en/faq/modification</guid>
			<description><![CDATA[<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">Q7</span>: Why a patch (or a patch file) is not a derivative work?</strong></p>
<p><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;"><strong>A7</strong></span>: Many people think that a patch file is associated to some original work (on the ground that, if there is no original work, there won’t be such thing as a patch) and in turn wrongly sees the patch as a derivate work. A patch, however, is not a derivate work for these reasons:(1) Patches do not contain the content of the original program they are applied to.According to Taiwan’s Copyright Law, a derivate work is defined as the result based on an original work by means of translation, instrumentation or filming. It means that a derivative work always consists of the expression of an original work, either directly or indirectly. In terms of computer software, when a developer modifies another person’s program and wants to distribute the modified program, since the modified program contains parts of the original program, the modified program is therefore a derivative work. The developer in question has to obtain the respective permission from the author of the original work in order to modify and/or distribute the program.A patch is a kind of “applet” that guides users to modify a specific program. A patch is usually much smaller than the original program file, and contains instructions that remove some part of the original program or add some new code into it. A patch does not contain the content of the original work. A patch therefore does not satisfy the Copyright Law’s definition for derivative work that the latter must contain direct or indirect expressions of an original work. A patch is henceforth not regarded as a derivative work, but rather an independent work. The author of a patch does not need to obtain the permissions from the author of the original work, and can release the patch under a license of his/her own likings.(2) The author of an original work does not suffer economic loss because of a patch distributed by the developer of the patch itself.This rationale considers the patch’s impact to the economic benefits of the author of the original work. The reason why Copyright Law requires the distribution of derivative work be authorized by the author of the original work is that, in one way or another, distribution of the derivative work should affect the sales of the original work. In order to avert the loss of the author of the original work, Copyright Law makes use of such mechanism to let the author of the original author charge the author of the derivative work for loyalties . A patch does not contain any content of the original program and only works along with the original program. When a user obtains a patch, he or she still needs to buy or acquire by other means the rights of using the original program from the author of the original work. The author of the original work does not suffer any economic loss because another person distributes a patch developed by him or her. Had Copyright Law granted the power to authors of original work that distribution of patch should be agreed upon, this would mean higher cost for the society as a whole and could have deterred technological innovation.</p>
<p>&nbsp;</p>
<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">Q8</span>: Following Q7, there are two further questions: (1) Since a patch is not a derivative work, does it imply that no permission is needed from the author of the original work when we create a patch? And, (2) do we need to obtain the permissions from the author in order to apply a patch to his or her own original work?</strong></p>
<p><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;"><strong>A8</strong></span>: <strong>(1)</strong> No, there is no need. As we have seen in A7, a patch is an independent work, not a derivative work. Development of a patch does not require the permission from the author of the original work.As for <strong>(2)</strong>, the answer is yes. We need such permissions. It is true that development of a patch needs no permission from the author of the original work. When a user applies the patch onto an original program, however, it is a behavior that modifies the work. Therefore the user has to obtain the permissions from the author in order to apply the patch. Yet, since most free/open source software licenses have already granted users the rights to modify the licensed work, a user can apply a patch under the terms set by the license.In addition, the developer of a patch can release it under any license that is not necessarily what the original work adopts. Yet, since applying a patch modifies the original work, if the patch’s license is not compatible with that of the original program, we may run into this awkward situation where users are not able to apply it legally. Therefore developers of patch files are advised to choose licenses that are compatible with the original programs for which they develop patches. (For compatibility issues, please refer to Q2 and Q3.)</p>
<p>&nbsp;</p>
<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">Q9</span>: Foobar is a free software program developed online by a number of people, and the current version is 1.7. Carol wants to use version 1.7 as the basis to develop a succeeding version 1.8. In order to do so, Carol needs to obtain the permission from the authors of Foobar’s version 1.7. Does Carol also need to have the permission from the authors of Foobar’s earlier versions?</strong></p>
<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">A9</span></strong>: Yes. It is commonplace for a computer program to have new versions keeping coming out. Unless a new version discards all of its legacy code and starts from scratch, it is always based on all of its previous versions. Therefore a new version is not just a derivative work of its immediate predecessor, but also a derivative work of all of its preceding versions.Thus, if Carol likes to develop a version 1.8 on the code base of version 1.7, and if version 1.7 has part of its code coming from version 1.6 or earlier versions, Carol will need not only the permission to modification from the developers (or the team) of version 1.7, she will also need to have permission from all members that have taken part in the development of all other earlier versions. Only with all the permissions will Carol be able to proceed with a work that is based on version 1.7.Online, multi-user development is commonplace for free/open source software projects. Such model, however, often causes the legal relationship between developers and users to be very complicated. To avoid such predicament, the developers have to plan ahead to choose a well-thought license.</p>
<p>&nbsp;</p>
<p><strong><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;">Q10</span>: When Masao was developing program Foo, he obtained a copy of program Bar, which Masao uses often, from Chuang. Bar is originally developed by Carol and is released under a free/open source software license. If Masao wants to use the code base of Bar to develop Foo, does he need to obtain the permissions from Chuang or Carol?</strong></p>
<p><span size="5" color="#ff6600" style="color: #ff6600; font-size: x-large;"><strong>A10</strong></span>: It depends on the license under which Bar is released. We’ll explain respectively a common scenario and a less common but still possible scenario.With the common scenario, Chuang is the one who has provided the code of Bar to Masao, but Chuang is not the author of Bar. Therefore Masao will have to obtain the permissions for e.g. reproduction and modification from the author (Carol), so that he can make use of Bar’s code base. But, since Bar is released under a free/open source software license, so long as Masao observes the terms and conditions of Bar’s license, he is able to reproduce Bar or modify Bar to his own purpose.There are a small number of free/open source licenses, such as MIT License,MPL (Mozilla Public License) and CPL (Common Public License), that allow a person to act as the licensor to sublicense the work to another third person. If Carol does have chosen one of the above-mentioned licenses, Chuang will be able to act as the licensor under the given terms that Carol have licensed to Chuang. In such scenario, the license contract is made between Chuang and Masao. Although it is a sublicensing act, for Masao as the licensee is still able to obtain effective rights of reproduction and modification. The only difference being that the licensor is Chuang, who is licensed to be able to sublicense, instead of Carol, who is the author of the original work (program Bar).Note: In general, sublicensing scenario occurs where one party that develops or uses the program (usually a commercial entity) sells a commercial version of the program, and where buyers of the program demand a direct contract between them and the party in question (e.g. the company that sells the program). There are, however, not so many free/open source software licenses that allow sublicensing from a third party. Because of this situation, when potential licensees are signing a contract with one such commercial entity, they need to pay attention to whether the license for the original program allows sublicensing on the commercial entity’s part. If there are such articles, the company can act as the licensor and form a contractual relationship between itself and the buyers under the sublicensing terms. If there is no such article, even if buyers have signed the contract with the company, they are still not sublicensed from the author of the original work and will not be able to use the program legally.</p>]]></description>
			<author>contact@openfoundry.org (法政組)</author>
			<category>問答集</category>
			<pubDate>Mon, 15 Oct 2007 17:41:18 +0000</pubDate>
		</item>
		<item>
			<title>專利</title>
			<link>https://www.openfoundry.org/en/faq/patent</link>
			<guid>https://www.openfoundry.org/en/faq/patent</guid>
			<description><![CDATA[<a name="faq1top"></a>
<div class="border-radius">
<ul class="bullet-8">
<li>問題 1：<a href="https://www.openfoundry.org/#k1q1">關於軟體專利的授權，請問 GPL 有無規範？</a></li>
<li>問題 2：<a href="https://www.openfoundry.org/#k1q2">（承上）GPL 若有關於軟體專利授權的規範，有無區分「衍生程式的專利」和「獨立程式的專利」？</a></li>
<li>問題 3：<a href="https://www.openfoundry.org/#k1q3">我所開發的 A 元件依 Apache-2.0 貢獻出來，且 A 元件上內嵌有我所擁有的專利，請問依照 Apache-2.0 規定，別人對 A 元件如何的使用不在我專利授權的範圍內？</a></li>
<li>問題 4：<a href="https://www.openfoundry.org/#k1q4">（承上）伴隨 A 元件一併散布出去的軟體專利權利，是否只包含我將所開發的 A 元件依 Apache-2.0 貢獻出來當時已申請到的專利？</a></li>
<li>問題 5：<a href="https://www.openfoundry.org/#k1q5">如果我程式撰寫過程中使用了某個自由開源軟體，之後若有人對這個自由開源軟體提起專利權侵害訴訟，那麼我是否就需停止使用該軟體？</a></li>
</ul>
</div>
<p> </p>
<h4><span class="fquestion">問題 1</span><a name="k1q1" id="id"></a>  關於軟體專利的授權，請問 GPL 有無規範？</h4>
<p> </p>
<p>GPL-2.0 究竟有無明定「軟體專利授權」存在著爭議，有人認為有，有人認為沒有。認為 GPL-2.0 已明訂軟體專利授權條款的人，主要根據來自第7條：任一 GPL-2.0 授權的程式一經散布之後，就必須完全依照 GPL-2.0 的規則來提供修改、應用、重製與散布，即使上面有經司法訴訟判定的軟體專利權利，亦同，若不能做到這點，散布者就不得散布這個 GPL-2.0 授權的程式。<br /><br />然而，部分論者認為GPL-2.0 第7條僅在表達一種態度，而未明文處理軟體專利授權議題，因為第7條確實從頭到尾並無明示「依據 GPL-2.0 取得程式著作權授權之人，一併取得其軟體專利的使用授權。」那麼，依照各國著作權法，著作財產權授權約定不明的部分，多推定為未授權；而專利權的授權方面，慣性上也多以明示的書面授權文件為準，所以推論上，並沒有強而有力的具體根據，認為僅依 GPL-2.0 第 7 條的規定，就認定該條款規範了明確的專利授權機制。GPL 改版至 3.0時，處理了這個議題，其明文規範依據 GPL-3.0 取得程式著作權授權之人，一併取得其軟體專利的使用授權。自此之後，採 GPL-3.0 授權的元件，軟體專利有無隨同授權的爭議已不復存在，然GPL-2.0關於此議題，還存有懸而難解的灰色地帶。<br /><br />關於 GPL-2.0 第 7 條的推論與說法的進一步說明，可以參照葛冬梅小姐與林誠夏先生合寫的<a href="https://www.openfoundry.org/tw/legal-column-list/894-gpl2-7">「GPL-2.0 第 7 條淺評」</a>的短篇專文 </p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 2</span>  <a name="k1q2" id="id"></a><span style="line-height: 40px;">（承上）GPL 若有關於軟體專利授權的規範，有無區分「衍生程式的專利」和「獨立程式的專利」？</span></h4>
<p><br />所謂獨立程式，依照一般通說，指的是其並非參考GPL程式來撰寫，該程式也可以被其他程式呼叫，或呼叫其他程式；而其與 GPL 程式的結合，只是置於同一個專案裡去進行功能上分工，這種狀態的話，該程式的授權狀態未必直接受到  GPL 程式的影響。</p>
<p>因此，一般來說，個別元件被判定為「獨立程式」的話，不論是 GPL-2.0 或 GPL-3.0 的所有授權規則都不會過渡到其上。所以依照這樣的論述，在一個大型軟體專案裡，「GPL 元件衍生程式的專利」與「GPL 元件獨立程式的專利」是有分立與分別主張的機會的。</p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 3</span>   <a name="k1q3" id="id"></a><span style="line-height: 40px;">我所開發的 A 元件依 Apache-2.0 貢獻出來，且 A 元件上內嵌有我所擁有的專利，請問依照 Apache-2.0 規定，別人對A元件如何的使用不在我專利授權的範圍內？</span></h4>
<p><br />您依 Apache-2.0 貢獻出來的 A 元件，只要其他元件的程式碼與其有連結呼叫 (link) 或是程式碼交融 (merge) 這樣的結合關係 (combination)，那這個專利授權是及於這些組合後的專案或是產品的；改寫 A 元件（即產生 A 元件的衍生元件）之後的組合狀態亦同，因為此時A元件本來的程式碼也還在衍生元件裡，只是處於一個被修改過後的衍生狀態；然而，若是新的專案、新的產品中完全沒有 A 元件程式碼的存在，則本來依附於 A 元件的軟體專利，是不會一併擴及到這個專利與產品上的，換句話說，此時這個新專案、新產品是不能合法利用您原本內嵌在 A 元件程式碼之上的軟體專利的。</p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 4</span>  <a name="k1q4" id="id"></a><span style="line-height: 40px;">（承上）伴隨 A 元件一併散布出去的軟體專利權利，是否只包含我將所開發的 A 元件依 Apache-2.0 貢獻出來當時已申請到的專利？</span></h4>
<p><br />會隨著 A 元件一併散布出去的軟體專利權利，包括已申請到的，和未來可以申請的，因為 Apache-2.0 使用的並非「軟體專利 (patent right)」或是單一的「專利 (patent)」這樣的既定名詞，而是特別選用「專利技術保護範圍 (patent claim)」這個涵攝更廣的概念。</p>
<p><br /> 其實強調此一名詞的效果就是，不管這個專利被核可過了與否，只要是程式的撰寫者自主的將這樣的技術方法寫入 Apache-2.0 授權的A元件裡，那麼 A 元件後續的使用者，就可以依照 Apache-2.0 的規則來使用這些技術方法，而不會被告專利侵權。相同的概念在 GPL-3.0 的條款裡也有被表述出來，例如其第 11 條第 2 項就明白指出，所授權出去的技術方法包括所有授權者能掌握的必要專利範圍，包括程式釋出時已經取得的專利技術，或是嗣後方取得的專利技術。 (A contributor's “essential patent claims” are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired...)<br /> </p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p> </p>
<p> </p>
<h4><span class="fquestion">問題 5</span>  <a name="k1q5" id="id"></a><span style="line-height: 40px;">如果我程式撰寫過程中使用了某個自由開源軟體，之後若有人對這個自由開源軟體提起專利權侵害訴訟，那麼我是否就需停止使用該軟體？</span></h4>
<p><br />若是您所撰寫的程式，僅提供個人使用或學術研究等不涉及商業利用的目的，原則上並不會有專利侵權的問題，因為這是在專利合理使用的範圍之內。但如果您所撰寫的程式未來會進行商業利用，而程式中所採用的自由開源軟體可能有專利侵權疑慮，那麼若日後真的發生專利侵權情事，您就必須將專利侵權部份從您所 撰寫的程式中拿掉。</p>
<span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>]]></description>
			<author>contact@openfoundry.org (法政組)</author>
			<category>問答集</category>
			<pubDate>Fri, 21 Sep 2012 08:58:05 +0000</pubDate>
		</item>
		<item>
			<title>商業應用</title>
			<link>https://www.openfoundry.org/en/faq/commercial-applications</link>
			<guid>https://www.openfoundry.org/en/faq/commercial-applications</guid>
			<description><![CDATA[<a name="faq1top"></a>
<div class="border-radius">
<ul class="bullet-8">
<li>問題 1：<a href="https://www.openfoundry.org/#k1q1">請問代客安裝自由開源軟體、並收取服務費的行為是否合法？</a></li>
</ul>
</div>
<br /> <br />
<h4><a name="k1q1" id="id"></a><span class="fquestion">問題 1</span>&nbsp;&nbsp;請問代客安裝自由開源軟體、並收取服務費的行為是否合法？</h4>
<br />
<p>是合法的，但有以下幾點需注意。</p>
<ol>
<li>所有自由開源軟體授權的軟體元件，都可以拿來進行商業利用，但商業利用時，也必須遵守個別授權條款的相關規定。</li>
<li>自由開源軟體授權原則上是以不收取著作權權利金、專利權權利金的方式進行散布，這是因為授權金的收取方式，向來有「授權對象、授權地域、授權期間」的限制，這些限制與自由開源軟體允許使用者自行修改、自行重製散布的模式有衝突；然而，只要收費模式與自由開源軟體授權條款的規則不相衝突，那都是可以收取的。</li>
<li>然而商標權的授權金在自由開源軟體領域是可以收取的，這是因為商標權是以圖標、圖形的方式(mark, logo)來顯現，這些圖標、圖形是可以被使用者自行移除掉的，只要自行移除掉，那就不會有商標授權方面的問題。</li>
</ol><br />所以商業使用自由開源軟體，要附帶注意到商標授權的問題，如果不欲支付商標授權金的話，需注意 (1) 不拿商標本身與此商標有關的字樣來為商業服務廣告宣傳，僅能事實性的標註該專案的利用狀態；(2) 實際產品在散布時，手動移除掉涉及商標授權的圖標與圖形。如果不能達致上述 (1)、(2) 兩個方法，並且涉及商業利用的話，那麼使用者最好另行洽談取得該商標的書面授權。 <br />進一步資訊您可以參考下列文章：<a href="https://www.openfoundry.org/tw/legal-column-list/2095-2010-07-15-10-21-46">淺談使用自由軟體時所應注意的商標授權問題</a>。<br />&nbsp; <span class="fqtop"><a href="https://www.openfoundry.org/#faq1top">Top</a></span>
<p>&nbsp;<br /><br />&nbsp;</p>]]></description>
			<author>contact@openfoundry.org (法政組)</author>
			<category>問答集</category>
			<pubDate>Wed, 15 May 2013 17:41:54 +0000</pubDate>
		</item>
	</channel>
</rss>
