<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:mtree="http://www.mosets.com/tree/rss/">
<channel>
<title>OpenFoundry - Recently Added Listings - 介紹</title>
<description></description>
<link>https://www.openfoundry.org/</link>
<lastBuildDate>Fri, 22 Nov 2019 08:40:42 +0100</lastBuildDate>
<generator>FeedCreator 1.7.3</generator>
<item>
	<title>Lua</title>
	<link>https://www.openfoundry.org/tw/resourcecatalog/Program-Development/Programming-Languages/lua/Introduction/lua</link>
	<description><![CDATA[<p>
<p>Lua是一種輕量語言，它的官方版本只包括一個精簡的核心和最基本的API。這使得Lua體積小、啟動速度快。它用標準C語言編寫並以原始碼形式開放，編譯後僅僅一百多KB，可以很方便的嵌入別的程式裡。和許多"大而全"的語言不一樣，網路通訊、圖形界面等都沒有預設提供。但是Lua可以很容易地被擴展：由宿主語言（通常是C或C++）提供這些功能，Lua可以使用它們，就像是本來就內置的功能一樣。事實上，現在已經有很多成熟的擴展模塊可供選用。</p>
<p>Lua是一種多重編程範式的程式設計語言：它只提供了很小的一個特性集合來滿足不同編輯範式的需要，而不是為某種特定的編輯範式提供繁雜的特性支援。例如，Lua並不提供繼承這個特性，但是你可以用元表來模擬它。諸如名字空間、類這些概念都沒有在語言基本特性中實現，但是我們可以輕易的用表結構（Lua唯一提供的複雜資料結構）輕易模擬。Lua可以在運行時隨時構造出一個函數，並把它看作一個對象（正是所謂的first class function），這個特性可以很好的滿足函數式編程的需要。這是提供了這些基本的元特性，我們可以任意的對語言進行自需的改造。</p>
<p>Lua原生支援的資料型別非常之少，它只提供了 Integer（預設是雙精度浮點數，可配置）、Boolean、String、、子程序、coroutine以及用戶自定義類型這幾種。但是其處理Byte的效率非常之高，加上元表的支援，我們可以高效的模擬出需要的複雜資料類型（比如集合、數組等）。</p>
<p>Lua是一個動態弱類型語言，支援增量式垃圾收集策略。有內建的，與作業系統無關的協作式多執行緒（coroutine）支援。</p>
<p>平台:跨平台<span style="white-space: pre;"> </span>原始碼授權類型:MIT License</p>
<p>資料來源:<a href="https://zh.wikipedia.org/zh-tw/Lua" target="_blank">https://zh.wikipedia.org/zh-tw/Lua</a></p>
</p>]]></description>
	<author>dio</author>
	<pubDate>Sat, 18 Sep 2010 01:42:53 +0100</pubDate>
	<guid>https://www.openfoundry.org/tw/resourcecatalog/Program-Development/Programming-Languages/lua/Introduction/lua</guid>
</item>
</channel>
</rss>
